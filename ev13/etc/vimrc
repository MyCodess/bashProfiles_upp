"#####  ==========  vimrs_up1 from arx ca. : ##############################################################
"
"#####  ==========  lets, defining varialbles, Allg-...: ===========================
let statuslinestr="%t\ %m%h%w%r[b%n]%<[%Y]\ %f%=\ %(%l/%L,%c%V%)\ %P"
let maplocalleader=","
let mapleader=","
" ---
" --!!-if mouse/ttymouse disabled, then all other mouse/behave/mouseMappings-options have NO effects! so with mouse= all other mouse-settings here are ignored!
set ttymouse=   "disabling mouse in vim in terminal
set mouse=      "disabling mouse in gvim : BUT then problem in mswin: rightclick extends the selction as default! but otherwise have to set mouse=i... in msw_gvimrc BUT then mouse will be active !?
"________________________________________  ___________________________
"
"
"
"#####  ==========  colors/highlights/colorschemes/...: ======================
hi IncSearch ctermbg=green   ""color for cu-search+replace-field !
" colorscheme  morning    " morning  peachpuff  default  desert
"________________________________________  ___________________________
"
"
"#####  ==========  sets-Allg: ==============================================
set backspace=2		" bs, allow backspacing over everything in insert mode
set breakat-=-      " by wrapping, no linebreak on "-", due to cmd-params!
set nocompatible	" Use Vim defaults (much better!)
set cpoptions+=n	" by wrapping lines, show wrapped lines between the line numbers.
let g:explVertical=1	" Split File Explorer vertically
let g:explSplitBelow=0    " Put new window above explorer window, if horizontally splitted.
let g:explSplitRight=1    " Put new window to the right of the existing explorer window, if vertically splitted.
let g:explStartBelow=1    " Put new explorer window below the current window
let g:explStartRight=0    " Put new explorer window to the left of the current window
let g:explWinSize=30	" explorer cols/rows
let g:explUseSeparators=1    " Use separator lines for file types/suffixes
set encoding=utf-8
set fileencoding=utf-8
" set fileformat=unix		" OR fileformat=unix,dos ? ; defines <EOL> of the current buffer for read/write if CR><NL> or only <NL> . converts dos to unix either.
set fileformats=unix,dos
set hidden		    " do not unload buffer when it is abandoned. buffer becomes hidden.
set history=100		" number of cmdLines and search-patterns to keep in history/viminfo, only if viminfo not null!
set hlsearch		" hls, highlighting the search results
set ignorecase smartcase  " ignore case, unless at least one uppercase character is in search word/pattern
set incsearch		" incremental serach during entering the search keyword
set laststatus=2	" status line always on; see statusline
set linebreak		" breaking lines at an appropriate place by wrapping.  check also breakat and  showbreak values/options!!
set listchars=eol:$,tab:^_,trail:+,extends:>,precedes:<,nbsp:.       " Strings to use in 'list' mode ##--offc-
set modeline		" for root must be of!! security! read first/last-line of file as vim-cmds!
" set pastetoggle=<leader>tp		" now in maps-section below as evv-mapping! kind of key mapping for toggling between autoindent and paste (like :set paste for no indentation)
set sessionoptions+=unix,slash		" for compatible sesseions between Win and Unix
set ruler			" show the cursor position all the time
set shiftwidth=4	" number of spaces to use for (auto)indent step. use the same as tabstop !!
set showcmd			"  Show (partial) command in status line, eg [count] ... .
set showmatch		" jump short to the match
set showmode		" message on status line to show current mode
set smartcase		" scs,  no ignore case when pattern has uppercase. Override the 'ignorecase' option if the search pattern contains upper.
set smartindent		" is like 'autoindent' but also recognizes some C syntax to increase/reduce the indent. if disturbing, disable it in text mode
let &statusline=statuslinestr		" entries for statusline
set tabstop=4		"by pressing TAB-key, Number of spaces that a <Tab> in the file counts for. should be the same as shiftwidth, which is for indents
set textwidth=521		"auto-linebreaks at column nn; 0 deactivates it.
let &titlestring=statuslinestr  " or to add/concat something: &titlestring="TEST- " . statuslinestr /OR from cmdLine:  vi -g -c "let &titlestring=\"TEST- \" . statuslinestr" *.txt
set visualbell
set nowrap			" no wrapped lines
set wildmenu        " On pressing wildchar/TAB in command-line to invoke completion, the possible matches are shown just above the command line.
set wrapscan		" ws, Searches wrap around the end of the file.
"________________________________________  ___________________________
"
"
"#####  ==========  mapping global keys: =====================================
"in the current line: replace end-of-sentence ".  *" with new-line (\r is new-line in ex )! eg for py-docstrings-pastes:
nmap <leader>.n     :s@\.  *@.\r@g<CR>
"in the current line: reformatt-the-cu-line to max-120-chars! eg for py-docstrings-pastes:
nmap <leader>12     :set textwidth=120<CR>gqj:set textwidth=0<CR>
" edit alternative file:
nmap <leader>#     :e#<CR>
" Disable highlight when <leader><cr> is pressed (org was silent:  map <silent> <leader><cr> :noh<cr> ):
nmap  <leader><cr> :noh<CR>
" 1ox= insert: (here without <ESC> at the end! so stay in insert-mode!):
" markers-for-evv_dnts, start/end-of-dnts-sections :
"autochdir to the dir of the current file , Carefull!!!: some plugins may NOT work !!! :
nmap <leader>acd           :set autochdir!<CR>
" comments-visibility:  more-visible,darker/less-visible,lighter  : lower-No==less-visible , see also :h cterm-colors ,and :h highlight :
nmap <leader>cm0  :hi Comment cterm=none  guifg=white       ctermfg=white<CR>
nmap <leader>cm1  :hi Comment cterm=none  guifg=lightgray   ctermfg=darkgray<CR>
nmap <leader>cm2  :hi Comment cterm=none  guifg=lightblue   ctermfg=lightblue<CR>
nmap <leader>cm3  :hi Comment cterm=none  guifg=darkcyan   ctermfg=darkcyan<CR>
nmap <leader>cm4  :hi Comment cterm=none  guifg=blue        ctermfg=blue<CR>
nmap <leader>cm5  :hi Comment cterm=none  guifg=brown      ctermfg=brown<CR>
" date time insert: see man 3 strftime for formats ... : %F == %Y-%m-%d (the ISO 8601 date format) ; /OR at end <Esc>
" <C-R>=  is the Register = , which keeps the return-value of the funciont strftime and here inserts it there by <C-R>= , see :h \"=
nmap <leader>da1            a<C-R>=strftime('/:%y%m%d  :  ')<CR>
nmap <leader>da2            a<C-R>=strftime('%y%m%d')<CR>
nmap <leader>daf            a<C-R>=strftime("%c")<CR>
nmap <leader>daF            a<C-R>=strftime('%F')<CR>
" ok1:  nmap <leader>da=            I<CR><C-R>=fold1Sm<CR><C-R>=strftime('/:%y%m%d :')<CR><Space><Space>
" -II- show diffs between current-changed-buffer and the current-saved-file-version in vimdiff:
nmap <leader>diff1         :set noautowrite<CR>:!cp -i %  %.org1<CR>:vertical diffsplit %.org1<CR>:!echo : ____ Do NOT forget, manually deleting %:p file ____<CR>:set autowrite&<CR>
" how diffs between current-changed-buffer and the current-saved-file-version, BUT with external-shell-diff-cmd:
nmap <leader>diff3         :set noautowrite<CR>:%w  !diff % - <CR>:set autowrite&<CR>
" delete-previous.lne-paste-and-Join-two lines: mainly for PDF-copy.paste-lines
nmap <leader>dp1  kddpkgJh 
nmap <leader>exp           :15Lexplore<CR>
nmap <leader>li            :set list!<CR>
nmap <leader>ln            :set number!<CR>
"Man-Pages runtime;  use eg: :Man ls
nmap <leader>manrun        :runtime! ftplugin/man.vim<CR>
nmap <leader>mou           :set mouse=a<CR>
nmap <leader>moun          :set mouse=<CR>
" paste/Insert-Clipboard in normal-mode the selection of mouse ...: two variants, dur to missing-middle-mous-taouchpad-in-citx_ofc1: (the 3-finger-taouchpad printed alway this C-S conde in vim! so here mapped!) middle.mouse-<c-s>-paste in both mode: Normal + Insert
"insert-clipboard-(NO-paste-mode)  ##--1OK-without-toggle-back:  nnoremap  <leader>ic   i<c-r>+
nnoremap  <leader>ic   i<c-r>+
"insert-clipboard-(paste-mode)   ##--1OK-without-toggle-back:  nnoremap  <leader>ip   :set paste<cr>i<c-r>+
nnoremap  <leader>ip   :set paste<cr>i<c-r>+<cr><ESC>:set nopaste<cr>
" jumpto-under-curor-tag (instead ctrl+] which make problems, and not-working-on-mswins ...):
nnoremap  <leader>tg   :tag  <c-r><c-w><cr>
" paste toggle:  instead vim-option togglepaste, here with evv-key:
nnoremap  <leader>tp       :set paste!<CR>:set paste?<CR>
" wrap with showbreak-symbols. NOT for copy/paste actions:
nmap <leader>wr            :set wrap!<CR>
" wrap withOUT any break-symbols, for copy/paste actions, so  WraP-with-Space.handling:
nmap <leader>wps           :set showbreak==#-><CR>:set wrap!<CR>
" copy upto the endofline, so now Y is analagous to C and D (see also :h Y):
nmap  Y             y$
nnoremap <leader><TAB>     :bnext<CR>
nnoremap <leader><S-Tab>   :bprevious<CR>
" join-all-marked-lines and replace \n with Separator, BUT first must mark the lines and then ESC /OR save with y !! :
nnoremap <leader>j1        :'<,'>s@\n@ , @<CR>
" delete blank/empty lines in the selected area: BUT first must mark the lines and then ESC /OR save with y !! :
nnoremap <leader>de1       :'<,'>g@^\s*$@d<CR>
" delete blank/empty lines in the selected area and join lines with Separator (in vimrc \| does not work, see :help map_bar ) : BUT first must mark the lines and then ESC /OR save with "y" !! :
" __was_halb_worked!?:   nnoremap <leader>dj1       :exe "'<,'>g@^\s*$@d" <BAR> '<,'>g/^/s@\n@ , @<CR>
nnoremap <leader>dj1       :'<,'>g@^\s*$@d<CR><BAR> :'<,'>s@\n@ , @<CR><Space>
" 4-times-join-4-lines (for saved-emails-headers)
nnoremap <leader>4j       JjJjJjJj
"________________________________________  ___________________________
"
"
"#####  ==========  plugins/commands/without-set: ===========================
"	_______:  gen. plugins:
syntax on
" loading plugin must be at the end, after all settings:
filetype plugin indent on
			" 1-filetype: Vim will try to recognize the type of file by loading automaticly
			" 2-plugin: when a file is edited its plugin file is also loaded, if there is one for the detected filetype.
			" 3-indent: when a file is edited its indent file is loaded, if there is one for the detected filetype
"________________________________________  ___________________________
"
"
"#####  ==========  pythons / jedi-vim : ====================================
let  g:jedi#show_call_signatures=2  "showing arguments-listings in the command line instead of a popup window!  disabling-fully with =0 !
let  g:jedi#use_tabs_not_buffers=1  "make jedi-vim open a new tab if you use the go to, ... commands.
"________________________________________  ___________________________
"
"
"#####  ==========  foldings-mdCm2 : ========================================
"	_______:  sets-foldings-options:
set nofoldenable   " by openning a doc, foled are all open/unfolded, if nofoldenable !otherwise do:  set foldenable
set foldminlines=0      " Minimum number of screen lines for a fold to be displayed closed
"	_______:  sets-foldings-vars:
" ok1:  let fold1Sm=$q_fold1Sm    " so could be set the evv-ENV-var and is better + works fine! but here just keep the vimrc independent of evvEnv so that globally usable for vim, also outside evvEnv ! 
let fold1Sm=repeat('#', 5).repeat(' ', 2).repeat('=', 10).repeat(' ', 2)    " evv-fold1-Start-Marker : md-title-5 (<h5>) + evv-start-marker-of-10=  : 17-chars
let fold1Em=repeat('#', 2).repeat('_', 40).repeat(' ', 2).repeat('_', 27)   " evv-fold1-End-Marker : md-horizontal-line (<hr/>)  + evv-end-makrker-of ____... : 69-chars
let fold12SmNoTab=repeat('_', 7).':'.repeat(' ', 2)    " evv-fold12-Start-Marker : subsections,  TAB+19char
let fold12Sm=repeat('	', 1).fold12SmNoTab
"	_______:  keymaps-insert/handle-markers :
" insert-foldStartMarker-level1-evv :
nmap  <leader>==             I<C-R>=fold1Sm<CR>
nmap  <leader>=D             I<CR><C-R>=fold1Sm<CR><C-R>=strftime('/:%y%m%d :')<CR><Space><Space>
" insert-foldENDMarker---level1-evv :
nmap  <leader>__              I<C-R>=fold1Em<CR><NL><ESC>
" insert-foldStartMarker-level2-evv :
nmap  <leader>_:              o<C-R>=fold12SmNoTab<CR>
" set-foldmethod-as-marker--evv :
nmap  <leader>fmm             : set foldmethod=marker<CR>
nmap  <leader>fmi             : set foldmethod=indent<CR>
" insert-evv-Folding-Markers-Level-1 , BUT use vim-default zf instead ! it understands syntax/comments/...! see :h fold-create-marker  :
nmap  <leader>mak1      I<NL><NL><C-R>=fold1Sm<CR><NL><C-R>=fold1Em<CR><NL><ESC>kkA
nmap  <leader>makd     I<NL><NL><C-R>=fold1Sm<CR><NL><C-R>=fold1Em<CR><NL><ESC>kkA<C-R>=strftime('/:%y%m%d :')<CR><Space><Space>
" insert-evv-Folding-Markers-Level-1 + Level-2
nmap  <leader>mak2      I<NL><NL><C-R>=fold1Sm<CR><NL><NL><C-R>=fold12Sm<CR><NL><BACKSPACE><C-R>=fold1Em<CR><NL><ESC>kkkkA
" __!!__All-set-for-foldmethod-as-marker, BUT indent just better for no1! se ...! for indent then do NOT ignore lines starting with # ! see :h foldignore :
set  foldmethod=indent  foldignore=
" autocmd  FileType  text,markdown,vim  setlocal  foldmethod=marker	" kind of folding
" foldmarker-evv-per-filetype!  ! unfortunately hard-coded! since foldmarker does NOT accept variables or regexp ! :
" OK1--if-evv-marker-disturbing-for other filetypes, then use:   autocmd  FileType  text,markdown,vim  setlocal  foldmarker=#####\ \ ==========\ \ ,________________________________________\ \ ___________________________
" --II- now added "##" to the endmerker, BUT here still without it! works for foleding! could be even smaller as foldmarker! will see if ok ... :
set  foldmarker=#####\ \ ==========\ \ ,________________________________________\ \ ___________________________
" __OK1-md1_marks_parly:  autocmd  FileType  text,markdown  setlocal  foldmarker=#####\ \ =====,_____\ \ ___________________________   " unfortunately hard-coded! since foldmarker does NOT accept variables or regexp !
" _ also-OK: autocmd BufRead *.txt *.md  set foldmarker=#####\ \ =====,_____\ \ ___________________________   " unfortunately hard-coded! since foldmarker does NOT accept variables or regexp !
"	_______:  keymaps-open/close/handle-foldings:
" fold-auto-open/close on entrance/leave:
nmap <leader>za            :set foldopen=all<CR>:set foldclose=all<CR>
" fold-auto-open/close on entrance/leave set back to defaults:
nmap <leader>zb            :set foldopen&<CR>:set foldclose&<CR>
" nmap <leader>fc  :set foldcolumn&<CR>
nmap <leader>zc            :set foldcolumn=
"________________________________________  ___________________________
"
"
" colors-modifications must be here almost at the end, after plugins/syntax-files/... to take effect! :
hi statusline      ctermbg=yellow    ctermfg=blue   " Active-/Current-window-statusline-color in terminal! for gui use guifg/bg !
hi statuslineNC    ctermbg=darkgray    ctermfg=blue  " Not_Active/Not_Current-windw-statusline-color
" set highlight+=sr	  " reverse video for statusLine.   info: +=si is obsolete and now means italic!!
" ##############################################################################################

set viminfofile=/tmp/hs1_viminf1     "enabling with: set viminfofile=/tmp/hs1_viminf1  (on msw /temp/ or ....)  " to disable hist-file: set viminfofile=  ; msw-ok: c:\temp\hs1_viminf1 /OR mkdir /c/tmp/ and =/tmp/hs1_viminf1   
set viminfo='0,<0,@0,f0,"0,/10,:10  " diable-all-inf-storings by setting to None: viminfo=  ! see :h 'viminfo'
