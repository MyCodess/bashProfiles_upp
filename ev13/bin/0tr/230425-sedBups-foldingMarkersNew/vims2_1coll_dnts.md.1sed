____________________  vimis2, 1coll, funcs, more, -quickies/onliners/quick.tips/quick.small.scripts/.... ____________________
#####  ==========  cu_1coll...:
________________________________________  ___________________________


#####  ==========  motions:
-- goto-last-time-cursor-edit-posion-by-openning a file (to the position of last time openning OR to the first line?):
	- : h options.txt and then /viminfo , :h viminfo + its options , :h viminfo-file-marks , 
	- in cmdline-invoke:  vim -c "normal '0"  --> it goes to the last-mark, so last time closing file line
	- from suse113-vimrc: go to the last-time-closing-file-position:
		" Only do this part when compiled with support for autocommands. 
		if has("autocmd")
		  " When editing a file, always jump to the last known cursor position. 
		  " Don't do it when the position is invalid or when inside an event handler 
		  " (happens when dropping a file on gvim). 
		  autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal g`\"" |
			\ endif
		endif " has("autocmd")
	- or in uue-vimrc:  set viminfo='40,f0  (did not work!? is also overwritten by suse-vimrc?)
	- OR manually go to the last-time-position immidiately after openning: '"  (' means got to the mark.X, and " ist the last-position-mark!)
		!! good if default opening-file-at-first-line, but sometime you do want go to the last-time-position!!
________________________________________  ___________________________


#####  ==========  reformatting-text/-indents/...:  gq , ...
- converting all paragraphs into one-liners, if paragraphs seperated by empty lines(^$):  :g/./,/^$/join ; if not by empty, but blank lines (eg containing spaces)  :g/\S/,/^\s*$/join
- cut/shorten a line to 79 chars (truncate line up to 79chars):   :s/^\(.\{79\}\).*/\1/
- deletes all empty lines in the whole file:  :g/^\s*$/d  (default range for :global command is the whole buffer!)

	_______:  -- indents:
- moves all lines matching/containing "foo" one shiftwidth:    :%g/foo/p|>   ;see :h :bar
________________________________________  ___________________________


#####  ========== reformating-code/syntax/beautifying/source.codes:  "=" :
-- Comments-Deleting and beautifying without comment-lines, hier a xml-file: steps: (try still with \_)
	%s/<!--.*-->//g   deletes all one-line-comments
		/OR alternative:  :%s/<!--/<!--^M/   and 	:%s/-->/^M-->/   converts one-line-comments in 3-lines; then:
	:g/<!--/,/-->/d  (ohne last line substitutes for one-line-comments werden bei den einlinigen comments die naechste Zeile auch deleted !!??)
		!!2DO: in above line problem with mixedlines code+multi-line-comment!! 2DO
________________________________________  ___________________________


#####  ========== piping/filtering/...:
- cmdline-piping-output into the current buffer:  :redir @x | set all | put x  (!! in cmdline | is NOT pipe-symbol, it just<-seperates several cmds; the laters need no ":" anymore!)
________________________________________  ___________________________


#####  ========== redirecting:

	_______:  You can use the following set of commands to redirect the output to the vim_maps.txt file (eg current mappings list): 
:redir! > vim_maps.txt
:map
:map!
:redir END

	_______:  
________________________________________  ___________________________


--###################################################
________________________________________  ___________________________

